git commit规范
    - header：概要
        - type：类型（必填）
            - feat：新功能
            - fix：修复
            - docs：文档
            - style：样式
            - refactor：重构
            - test：测试
            - chore：工具
            - revert：回滚
        - scope：作用域（可选）
            - 控制层\视图层\数据层
            - 视项目定
            - *全局
        - subject：简短描述（必填）

    - body：详细描述
        - 第二行空行
        - 说明代码变动动机以及效果

    - foot
        - 针对不兼容变动，以及处理方法
        - 关闭issue

草稿
    - 分析
        - 解析django的site\app\model\field信息
        - 避免代码的入侵，不影响开发者对django的使用习惯
        - 只作为后台，不考虑
        - 关注的重点应在后端，集中在后端的field解析上
        - 支持用户扩展自定义组件
        - 面向接口而不是面向实现
        - 尽可能使用组合模式而不是继承
        - 生成的代码应满足pep8规范和eslint规范
        - 支持二次开发和代码合并

        - 难点
            - 解析数据
            - 扩展
            - 无感知，非入侵
            - 前后端标准化，前后端均采用MVC模式

    - 设计
        - 核心层的代码不允许外部修改
        - 解析、映射、渲染，三元素
        - 研究django orm的设计
            - 元类只是在new类的时候，能够丰富类的内容，比如混入一些字段
        - 组件、数据、映射、渲染的关系
            - 组件是核心，支持扩展
            - 数据是解析方法，将结果作为参数传给组件，不允许开发者改
            - 映射是中间过程，生成前端代码，不允许开发者改
            - 渲染时输出方法，定义了模板路径和输出路径（配置文件读），不允许开发者改

    - 实现
        - 自下而上开发，从field到model到app到site
        - 解析，映射，渲染
        - 以典型为例

        - 组件最后代表的是渲染后的结果，最终需要有个东西描绘前端代码的图，整站的模板
        - 继续抽象
            - 组件是字段级别的
            - 页面级别的
            - 最终扩大到整个网站